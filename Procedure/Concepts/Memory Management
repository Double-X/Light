Each struct, when created, will know which pointers points to it and its depth from the GC root.
Those pointers will also mark the depth of itself and that of the struct it points to.
The pointer distance is the difference between those depth.
If a pointer's pointing from a smaller depth to a larger depth, then it's a downward pointer.
If a pointer's pointing from a larger depth to a smaller depth, then it's a upward pointer.
If a pointer's pointing among the same depth, then it's a flat pointer.
When any of those pointer points to something else and/oe dies, that struct will be immediately updated about this.
When a pointer becomes pointing to that struct, that struct will be immediately updated about this.
When a struct is updated about the changes of pointers pointing to it, its depth from the GC root will always be updated to that of the pointer having the largest depth from the GC root.
When that struct knows that it's pointed by no pointers, it'll immediately be freed.
Circular references are impossible if all pointers in the whole program are downward pointers.
Any struct pointed by at least 1 pointers pointing upwards is suspectable for circular references.
Any struct pointed by 1 at least 1 flat pointer and having at least 1 flat pointers pointing to something else is suspectable for circular references.
The general algorithm is as follows:
1. Right before killing a pointer or changing it from pointing to a struct to something else, marks that struct as checked and check all the other pointers pointing to that struct.
2. If there are no such pointers, then that struct should be garbage collected.
3. If at least 1 of them are from the GC root, then that struct should not be garbage collected.
4. If none of them are from the GC root, then repeat step 1.
5. If a checked struct is checked again, then circular references exist.
