Pure is a keyword for functions in Light Procedure.
This keyword can't be used with idempotent nor nullipotent for the same function. Violating this is a compilation error.
A function is pure if and only if it causes no side effects and always return the same value given the same arguments.
There are built-in pure functions and operators.
A function can be marked as pure if and only if all its statements are pure. Violating this is a compilation error.
The compiler can be set to issue warnings rather than errors for pure functions violating this rule.
All functions marked as pure can be optimized by the compiler due to referential transparency.
Note that a pure function is always nullipotent which is always idempotent, while the converse isn't necessarily true.
Non void functions not marked with nullipotent nor pure will receive warnings.

For pure functions, there's another keyword: cached, meaning that the language will keep a mapping from the inputs to the outputs.
Therefore, those pure functions will just return the previously cached outputs if the same inputs are already passed before.
So, this keyword's advantageous when the input/output set takes little memory but the pure function takes lots of time to run.
Conversely, it's disadvantageous when the input/output set takes lots of memory but the pure function takes little time to run.
